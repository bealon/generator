package ${packageName}.config;

import java.io.Serializable;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.Filter;

import org.apache.shiro.cache.CacheManager;
import org.apache.shiro.mgt.SecurityManager;
import org.apache.shiro.mgt.SessionsSecurityManager;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.realm.Realm;
import org.apache.shiro.session.Session;
import org.apache.shiro.session.mgt.SessionManager;
import org.apache.shiro.session.mgt.eis.SessionDAO;
import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;
import org.apache.shiro.spring.web.ShiroFilterFactoryBean;
import org.apache.shiro.web.mgt.DefaultWebSecurityManager;
import org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.StringRedisSerializer;

import com.polyman.common.base.redis.JdkRedisSerializer;
import com.polyman.common.base.shiro.HeaderWebSessionManager;
import com.polyman.common.base.shiro.ShiroRedisCacheManager;
import com.polyman.common.base.shiro.ShiroRedisSessionDAO;
import com.polyman.common.base.shiro.TestAopAllianceAnnotationsAuthorizingMethodInterceptor;

import com.polyman.common.base.shiro.TestAuthenticationFilter;
import ${packageName}.common.shiro.ApiAuthenticationFilter;
import ${packageName}.common.shiro.UserNamePassWordRealm;

@Configuration
public class ShiroConfig {
	
	@Autowired  
	private Environment env;

	@Bean("shiroRedisSessionRedisTemplate")
	public RedisTemplate<String, Session> shiroRedisSessionRedisTemplate(
			RedisConnectionFactory redisConnectionFactory) {
		RedisTemplate<String, Session> sessionRedisTemplate = new RedisTemplate<>();
		sessionRedisTemplate.setConnectionFactory(redisConnectionFactory);
		JdkRedisSerializer<Serializable> collectionSerializer = JdkRedisSerializer.getInstance();
		sessionRedisTemplate.setKeySerializer( new StringRedisSerializer());
		sessionRedisTemplate.setValueSerializer(collectionSerializer);
		sessionRedisTemplate.afterPropertiesSet();
		return sessionRedisTemplate;
	}

	@Bean("shiroRedisCacheRedisTemplate")
	public RedisTemplate<Object, Serializable> shiroRedisCacheRedisTemplate(
			RedisConnectionFactory redisConnectionFactory) {
		RedisTemplate<Object, Serializable> cacheRedisTemplate = new RedisTemplate<>();
		cacheRedisTemplate.setConnectionFactory(redisConnectionFactory);
		cacheRedisTemplate.afterPropertiesSet();
		return cacheRedisTemplate;
	}

	@Bean
	public SessionDAO sessionDAO() {
		ShiroRedisSessionDAO sessionDAO = new ShiroRedisSessionDAO();
		sessionDAO.setKeyPrefix("${projectName}");
		return sessionDAO;
	}

	@Bean
	public CacheManager cacheManager() {
		ShiroRedisCacheManager shiroRedisCacheManager = new ShiroRedisCacheManager();
		shiroRedisCacheManager.setKeyPrefix("${projectName}");
		return shiroRedisCacheManager;
	}

	@Bean
	protected SessionManager sessionManager() {
		HeaderWebSessionManager sessionManager = new HeaderWebSessionManager();
		sessionManager.setSessionDAO(sessionDAO());
		return sessionManager;
	}

	@Bean
	protected SessionsSecurityManager securityManager(List<Realm> realms) {
		DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();
		securityManager.setCacheManager(cacheManager());
		securityManager.setSessionManager(sessionManager());
		securityManager.setRealms(realms);
		return securityManager;
	}

    @Bean
    public AuthorizingRealm userNamePassWordRealm() {
        UserNamePassWordRealm userRealm = new UserNamePassWordRealm();
        userRealm.setAuthenticationCachingEnabled(true);
        userRealm.setAuthorizationCachingEnabled(true);
        return userRealm;
    }

	@Bean
	protected ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager) {
		ShiroFilterFactoryBean shiroFilter = new ShiroFilterFactoryBean();
		shiroFilter.setLoginUrl("/manager/login");
		shiroFilter.setSecurityManager(securityManager);

		Map<String, Filter> filters = new HashMap<>();
		TestAuthenticationFilter testAuthenticationFilter=new TestAuthenticationFilter();
		TestAuthenticationFilter.setTestEnvironment(env.getProperty("app.testEnvironment",Boolean.class));
		
		ApiAuthenticationFilter apiAuthenticationFilter=new ApiAuthenticationFilter();

		filters.put("test",testAuthenticationFilter);
		filters.put("api",apiAuthenticationFilter);
		
		shiroFilter.setFilters(filters);

		Map<String, String> filterMap = new LinkedHashMap<>();
		filterMap.put("/statics/**", "anon");
		filterMap.put("/js/**", "anon");
		filterMap.put("/favicon.ico", "anon");
		filterMap.put("/manager/captcha", "anon");
        filterMap.put("/manager/logout", "logout");
		
	

		filterMap.put("/swagger-ui.html", "test");
		filterMap.put("/swagger-resources/**", "test");
		filterMap.put("/image/**","test");
		filterMap.put("/v2/api-docs", "test");
		filterMap.put("/webjars/**", "test");

		filterMap.put("/**", "api");
		
		shiroFilter.setFilterChainDefinitionMap(filterMap);
		return shiroFilter;
	}
	
	@Bean
    public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() {
        DefaultAdvisorAutoProxyCreator proxyCreator = new DefaultAdvisorAutoProxyCreator();
        proxyCreator.setProxyTargetClass(true);
        return proxyCreator;
    }
    
    @Bean
    public TestAopAllianceAnnotationsAuthorizingMethodInterceptor apiAopAllianceAnnotationsAuthorizingMethodInterceptor() {
        TestAopAllianceAnnotationsAuthorizingMethodInterceptor aopAllianceAnnotationsAuthorizingMethodInterceptor = new TestAopAllianceAnnotationsAuthorizingMethodInterceptor();
        aopAllianceAnnotationsAuthorizingMethodInterceptor.setTestEnvironment(env.getProperty("app.testEnvironment",Boolean.class));
        return aopAllianceAnnotationsAuthorizingMethodInterceptor;
    }
    
    @Bean
    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager) {
        AuthorizationAttributeSourceAdvisor advisor = new AuthorizationAttributeSourceAdvisor();
        advisor.setSecurityManager(securityManager);
        advisor.setAdvice(apiAopAllianceAnnotationsAuthorizingMethodInterceptor());
        return advisor;
    }

}
