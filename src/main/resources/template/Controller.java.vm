package ${packageName}.web.controller${modulePackage};

import java.util.List;
import java.util.Map;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.polyman.common.base.utils.PageUtils;
import com.polyman.common.base.utils.ResultDto;
import ${bizExceptionPath};
import ${superControllerClass};
import ${packageName}.bean${modulePackage}.Add${BeanName}Request;
import ${packageName}.bean${modulePackage}.Query${BeanName}Request;
import ${packageName}.bean${modulePackage}.Update${BeanName}Request;
import ${packageName}.view${modulePackage}.${BeanName}Bean;
import ${packageName}.service${modulePackage}.${BeanName}Service;


#if($swaggerFlag)
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
#end

#if($shiroFlag)
import org.apache.shiro.authz.annotation.RequiresPermissions;
#end


/**  
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
 
#if($swaggerFlag)
@Api("${comments}")
#end
@RestController
@RequestMapping("${modulePath}/${beanName}")
public class ${BeanName}Controller extends BaseBusinessController {

	@Autowired
	private ${BeanName}Service ${beanName}Service;
	
	
	 #if($swaggerFlag)
        @ApiOperation(value="获取列表信息", notes="获取列表信息")
        @ApiImplicitParam(name ="request", value = "请求对象", required = true, dataType = "Query${BeanName}Request")
     #end
     #if($shiroFlag) @RequiresPermissions("${moduleRight}${beanname}:list") #end
	@PostMapping("/list")
	public ResultDto list(@RequestBody Query${BeanName}Request request) throws ${bizExceptionName}{
		//查询列表数据
		List<${BeanName}Bean> ${beanName}BeanList = ${beanName}Service.queryList(request);
		int total = ${beanName}Service.queryTotal(request);
		PageUtils pageUtil = new PageUtils(${beanName}BeanList, total, request.getPageSize(), request.getPageNo());
		return success(pageUtil);
	}
	
	

	 #if($swaggerFlag)
        @ApiOperation(value="获取详细信息", notes="获取详细信息")
        @ApiImplicitParam(name ="${pkPropertyName}", value = "请求对象", required = true, dataType = "${pkJavaDataType}")
     #end
     #if($shiroFlag) @RequiresPermissions("${moduleRight}${beanname}:info") #end
	@GetMapping("/info/{${pkPropertyName}}")
	public ResultDto info(@PathVariable("${pkPropertyName}") ${pkJavaDataType} ${pkPropertyName}) throws ${bizExceptionName}{
		 ${BeanName}Bean ${beanName}Bean = ${beanName}Service.query${BeanName}(${pkPropertyName});
		 return success(${beanName}Bean);
	}
	
	
	  #if($swaggerFlag)
        @ApiOperation(value="新增", notes="获取新增信息")
        @ApiImplicitParam(name ="request", value = "请求对象", required = true, dataType = "Add${BeanName}Request")
     #end
     #if($shiroFlag) @RequiresPermissions("${moduleRight}${beanname}:save") #end
	//@SysLog("保存")
	@PostMapping("/save")
	public ResultDto save(@RequestBody @Valid Add${BeanName}Request request) throws ${bizExceptionName}{
		${beanName}Service.save(request);
		return success();
	}
	
	 #if($swaggerFlag)
        @ApiOperation(value="修改", notes="修改")
        @ApiImplicitParam(name ="request", value = "请求对象", required = true, dataType = "Update${BeanName}Request")
     #end
      #if($shiroFlag) @RequiresPermissions("${moduleRight}${beanname}:update") #end
	//@SysLog("修改")
	@PostMapping("/update")
	public ResultDto update(@RequestBody @Valid Update${BeanName}Request request) throws ${bizExceptionName}{
		${beanName}Service.update(request);
		return success();
	}
	
     #if($swaggerFlag)
        @ApiOperation(value="删除", notes="删除")
        @ApiImplicitParam(name ="${pkPropertyName}", value = "请求对象", required = true, dataType = "${pkJavaDataType}")
     #end
     #if($shiroFlag) @RequiresPermissions("${moduleRight}${beanname}:delete") #end
    //@SysLog(value="删除",self=true)
    @GetMapping("/delete/{${pkPropertyName}}")
    public ResultDto delete(@PathVariable("${pkPropertyName}") ${pkJavaDataType} ${pkPropertyName}) throws ${bizExceptionName}{
        ${beanName}Service.delete(${pkPropertyName});
        return success();
    }
    
	 #if($swaggerFlag)
        @ApiOperation(value="批量删除", notes="批量删除")
        @ApiImplicitParam(name ="${pkPropertyName}s", value = "请求对象", allowMultiple = true,required = true, dataType = "${pkJavaDataType}")
     #end
          #if($shiroFlag) @RequiresPermissions("${moduleRight}${beanname}:delete") #end
	//@SysLog(value="批量删除",self=true)
	@PostMapping("/deletes")
	public ResultDto delete(@RequestBody ${pkJavaDataType}[] ${pkPropertyName}s) throws ${bizExceptionName}{
		${beanName}Service.deleteBatch(${pkPropertyName}s);
		return success();
	}
	
}
